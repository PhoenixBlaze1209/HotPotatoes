<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Aly."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="Aly" />
<meta name="dc:title" content="Unscramble the Sentence" />



<title>
Unscramble the Sentence
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */


/* CSS variables for colours. */
:root {
  --font-family: "Segoe UI", Roboto, Arial, sans-serif;
  --font-size: 16px;
  --color-text: #1a1a1a;
  --color-bg: #f9fafb;
  --color-primary: #2563eb;
  --color-primary-hover: #1d4ed8;
  --color-secondary: #e5e7eb;
  --color-border: #d1d5db;
  --color-success: #16a34a;
  --color-error: #dc2626;
  --radius: 0.75rem;
  --shadow: 0 4px 8px rgba(0,0,0,0.05);
}

/* Original legacy color scheme - uncomment to use original colors */
/*
:root{
  --font-family: arial, helvetica, sans-serif;
  --font-size: small;
  --color-text: #000000;
  --color-title: #000000;
  --color-func-light: #eeeeee;
  --color-func-shade: #6e6e6e;
  --color-link: #0000ff;
  --color-vlink: #ff00ff;
  --color-navbar: #000000;
  --color-nav-light: #7f7f7f;
  --color-nav-shade: #000000;
  --color-nav-text: #ffffff;
  --color-bg: #ffffff;
  --color-exercise-bg: #dddddd;
  --radius: 0.5rem;
  --shadow: 0.2rem 0.3rem 0.2rem rgba(110,110,110,0.7);
}
*/

body {
  font-family: var(--font-family);
  font-size: var(--font-size);
  background-color: var(--color-bg);
  color: var(--color-text);
  margin: 0 5%;
  padding-bottom: 1rem;
  line-height: 1.6;
}

p {
  text-align: left;
  margin: 0;
  font-size: 1em;
}

table, div, span, td {
  font-size: 1em;
  color: var(--color-text);
}

div.Titles {
  padding: 0.5rem;
  text-align: center;
  color: var(--color-primary);
  font-weight: bold;
}

button {
  font-family: var(--font-family);
  font-size: 1em;
  cursor: pointer;
  border: none;
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  background-color: var(--color-primary);
  color: #ffffff;
  transition: all 0.2s ease;
  box-shadow: var(--shadow);
}

button:hover {
  background-color: var(--color-primary-hover);
}

button:active {
  transform: translateY(1px);
  box-shadow: none;
}

.ExerciseTitle {
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--color-primary);
  text-align: center;
  margin: 1rem 0;
}

.ExerciseSubtitle {
  font-size: 1.2rem;
  font-weight: 600;
  color: var(--color-text);
  text-align: center;
  margin: 0.5rem 0;
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer {
  background-color: #ffffff;
  text-align: center;
  font-size: 1em;
  color: var(--color-text);
  padding: 1rem;
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  margin-bottom: 1rem;
}

div.ReadingContainer, div.ExerciseContainer {
  min-width: 15em;
  flex-grow: 1;
  flex-basis: 0;
  margin: 0.5rem;
}

div#ContainerDiv {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 0.5rem;
}

/* RTL Text Support */
.RTLText {
  text-align: right;
  font-size: 150%;
  direction: rtl;
  font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--font-family); 
}

.CentredRTLText {
  text-align: center;
  font-size: 150%;
  direction: rtl;
  font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--font-family); 
}

button p.RTLText {
  text-align: center;
}

.RTLGapBox {
  text-align: right;
  font-size: 150%;
  direction: rtl;
  font-family: "Times New Roman", var(--font-family);
}

.rtl {
  text-align: right;
  font-size: 140%;
}

.Guess {
  font-weight: bold;
  color: var(--color-error);
}

.CorrectAnswer {
  font-weight: bold;
  color: var(--color-success);
}

/* Timer Styles */
div#Timer {
  padding: 0.25em;
  margin: 0 auto;
  text-align: center;
  color: var(--color-primary);
}

span#TimerText {
  padding: 0.25em;
  border: 1px solid var(--color-border);
  border-radius: 0.25rem;
  font-weight: bold;
  display: none;
  color: var(--color-primary);
  background-color: #ffffff;
}

/* Feedback Styles */
.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer {
  color: var(--color-text);
}

.LeftItem {
  font-size: 1em;
  color: var(--color-text);
  text-align: left;
}

.RightItem {
  font-weight: bold;
  font-size: 1em;
  color: var(--color-text);
  text-align: left;
}

/* Form Elements */
input, textarea {
  font-family: var(--font-family);
  font-size: 1.1rem;
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.5rem;
  transition: border-color 0.2s ease;
}

input:focus, textarea:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
}

select {
  font-size: 1em;
  font-family: var(--font-family);
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.5rem;
}

/* Feedback Dialog */
div.Feedback {
  background-color: #ffffff;
  left: 33%;
  width: 34%;
  top: 33%;
  z-index: 1000;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 1rem;
  text-align: center;
  color: var(--color-text);
  position: absolute;
  display: none;
  font-size: 1em;
  box-shadow: 0 10px 25px rgba(0,0,0,0.15);
}

div.ExerciseDiv {
  color: var(--color-text);
}

/* JMatch Styles */
table.MatchTable {
  margin: 2em auto; 
  border-width: 0;
}

/* Flashcard Styles */
table.FlashcardTable {
  background-color: transparent;
  color: var(--color-text);
  border-color: var(--color-border);
  margin: 2em auto;
  position: relative;
  text-align: center;
  padding: 0;
}

table.FlashcardTable tr {
  border-style: none;
  margin: 0;
  padding: 0;
  background-color: var(--color-secondary);
}

table.FlashcardTable td.Showing {
  font-size: 140%;
  text-align: center;
  width: 50%;
  display: table-cell;
  padding: 2em;
  margin: 0;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  color: var(--color-text);
  box-shadow: var(--shadow);
  background-color: #ffffff;
}

table.FlashcardTable td.Hidden {
  display: none;
}

/* JMix and JMatch Drag Styles */
div.JMixDrag, div.JMatchDrag {
  padding: 0;
  background-color: #ffffff;
  border-style: none;
}

div#GuessDiv {
  padding: 0.5em;
  margin-bottom: 2em;
}

div#SegmentDiv {
  margin: 2em 0;
  text-align: center;
}

a.ExSegment {
  font-size: 120%;
  font-weight: bold;
  text-decoration: none;
  color: var(--color-text);
  display: inline-block;
  padding: 0.5em;
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  margin-bottom: 0.5em;
  background-color: #ffffff;
  transition: all 0.2s ease;
}

a.ExSegment:hover {
  background-color: var(--color-secondary);
  border-color: var(--color-primary);
}

span.RemainingWordList {
  font-style: italic;
}

div.DropLine {
  position: absolute;
  text-align: left;
  border-bottom: 1px solid var(--color-primary);
  width: 80%;
  left: 10%;
}

/* JCloze Styles */
.ClozeWordList {
  text-align: center;
  font-weight: bold;
}

div.ClozeBody {
  text-align: left;
  margin: 2em 0;
  line-height: 2.0;
  font-size: 1.1rem;
}

span.GapSpan {
  font-weight: bold;
}

span.GapSpan input {
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  padding: 0.25rem 0.5rem;
  font-size: 1rem;
  margin: 0.25rem;
}

/* JCross Styles */
table.CrosswordGrid {
  margin: auto auto 1em auto;
  border-collapse: collapse;
  padding: 0;
  background-color: #000000;
}

table.CrosswordGrid tbody tr td {
  width: 1.5em;
  height: 1.5em;
  text-align: center;
  vertical-align: middle;
  font-size: 140%;
  padding: 1px;
  margin: 0;
  border: 1px solid #000000;
  color: #000000;
}

table.CrosswordGrid span {
  color: #000000;
}

table.CrosswordGrid td.BlankCell {
  background-color: #000000;
  color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell {
  text-align: center;
  vertical-align: middle;
  background-color: #ffffff;
  color: #000000;
  font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell {
  text-align: left;
  vertical-align: top;
  background-color: #ffffff;
  color: #000000;
  padding: 1px;
  font-weight: bold;
}

.NumLetterCellText {
  cursor: pointer;
  color: #000000;
}

.GridNum {
  vertical-align: super;
  font-size: 66%;
  font-weight: bold;
  text-decoration: none;
  color: #000000;
}

.GridNum:hover, .GridNum:visited {
  color: #000000;
}

table#Clues {
  margin: auto;
  vertical-align: top;
}

table#Clues td {
  vertical-align: top;
}

table.ClueList {
  margin: auto;
}

td.ClueNum {
  text-align: right;
  font-weight: bold;
  vertical-align: top;
}

td.Clue {
  text-align: left;
}

div#ClueEntry {
  text-align: left;
  margin-bottom: 1em;
}

/* Keypad Styles */
div.Keypad {
  text-align: center;
  display: none;
  margin-bottom: 0.5em;
}

div.Keypad button {
  font-family: var(--font-family);
  font-size: 120%;
  background-color: #ffffff;
  color: var(--color-text);
  width: 2em;
  border: 1px solid var(--color-border);
  border-radius: 0.5rem;
  box-shadow: var(--shadow);
  cursor: pointer;
  transition: all 0.2s ease;
}

div.Keypad button:hover {
  background-color: var(--color-secondary);
}

/* JQuiz Styles */
div.QuestionNavigation {
  text-align: center;
}

.QNum {
  margin: 0em 1em 0.5em 1em;
  font-weight: bold;
  vertical-align: middle;
}

.QuestionText {
  text-align: left;
  margin: 0;
  font-size: 1em;
}

.Answer {
  font-size: 120%;
}

.PartialAnswer {
  font-size: 120%;
  letter-spacing: 0.1em;
  color: var(--color-primary);
}

.Highlight {
  color: #000000;
  background-color: #ffff00;
  font-weight: bold;
  font-size: 120%;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}

ol.QuizQuestions {
  text-align: left;
  list-style-type: none;
}

li.QuizQuestion {
  padding: 1em;
  border-bottom: 1px solid var(--color-border);
}

ol.MCAnswers {
  text-align: left;
  list-style-type: upper-alpha;
  padding: 1em;
}

ol.MCAnswers li {
  margin-bottom: 1em;
}

ol.MSelAnswers {
  text-align: left;
  list-style-type: lower-alpha;
  padding: 1em;
}

div.ShortAnswer {
  padding: 1em;
}

/* Function Button Styles */
.FuncButton {
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  min-width: 3em;
  color: var(--color-text);
  background-color: #ffffff;
  cursor: pointer;
  box-shadow: var(--shadow);
  transition: all 0.2s ease;
  font-family: var(--font-family);
  font-size: 1rem;
}

.FuncButton:hover {
  background-color: var(--color-primary);
  color: #ffffff;
}

.FuncButton:active {
  transform: translateY(1px);
  box-shadow: none;
}

/* Navigation Bar Styles */
div.NavButtonBar {
  background-color: var(--color-primary);
  text-align: center;
  margin: 0.5rem 0;
  padding: 0.5rem;
  border-radius: var(--radius);
  box-shadow: var(--shadow);
}

.NavButton {
  border: none;
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  min-width: 3em;
  background-color: #ffffff;
  color: var(--color-primary);
  cursor: pointer;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  transition: all 0.2s ease;
  font-family: var(--font-family);
  font-size: 1rem;
  margin: 0.25rem;
}

.NavButton:hover {
  background-color: var(--color-secondary);
  color: var(--color-primary-hover);
}

.NavButton:active {
  transform: translateY(1px);
  box-shadow: none;
}

/* Link Styles */
a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color 0.2s ease;
}

a:visited {
  color: #7c3aed;
}

a:hover {
  color: var(--color-primary-hover);
  text-decoration: underline;
}

/* Card Styles */
div.CardStyle {
  position: absolute;
  font-family: var(--font-family);
  font-size: 1em;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.5em;
  min-width: 2em;
  color: var(--color-text);
  box-shadow: var(--shadow);
  background-color: #ffffff;
  left: -50px;
  top: -50px;
  overflow: visible;
  touch-action: none;
  user-select: none;
  box-sizing: border-box;
}

div.CardStyleCentered {
  text-align: center;
}


</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}






//JMIX STANDARD OUTPUT FORMAT CODE

var CorrectResponse = 'Correct!';
var IncorrectResponse = 'Sorry! Try again.';
var TheseAnswersToo = 'These answers are also correct:';
var ThisMuchCorrect = 'This much of your answer is correct:';
var NextCorrect = 'The next correct part is: ';
var YourScoreIs = 'Your score is ';
var CapitalizeFirst = false;
var Penalties = 0;
var Finished = false;
var TimeOver = false;
var Score = 0;
var strInstructions = '';
var AnswersTried = '';


var SegmentTemplate = '&#160; &#160;<a class="ExSegment" href="javascript:void(0)" onclick="AddSegment([SegmentNumber])" title="Click on words to add them to the sentence.">[CurrentSegment]</a>&#160; &#160;';

var Exercise = '';

var Punctuation = '\u002C\u002E';

var Openers = '';

var Guesses = new Array();
var Remaining = new Array();
var CorrectParts = new Array();

var ClosestMatch = 0;

var LowerString='';
var UpperString='';

var Output = '';

var Segments = new Array();
Segments[0] = new Array();
Segments[0][0] = '\u0041\u006C\u006C\u0020\u006C\u0069\u0076\u0069\u006E\u0067\u0020\u0074\u0068\u0069\u006E\u0067\u0073';
Segments[0][1] = 1;
Segments[0][2] = 0;
Segments[1] = new Array();
Segments[1][0] = '\u0061\u006E\u0064\u0020\u0073\u0068\u0065\u006C\u0074\u0065\u0072';
Segments[1][1] = 4;
Segments[1][2] = 0;
Segments[2] = new Array();
Segments[2][0] = '\u0074\u006F\u0020\u0073\u0075\u0072\u0076\u0069\u0076\u0065\u002E';
Segments[2][1] = 5;
Segments[2][2] = 0;
Segments[3] = new Array();
Segments[3][0] = '\u0077\u0061\u0074\u0065\u0072\u002C\u0020\u0061\u0069\u0072\u002C';
Segments[3][1] = 3;
Segments[3][2] = 0;
Segments[4] = new Array();
Segments[4][0] = '\u006E\u0065\u0065\u0064\u0020\u0066\u006F\u006F\u0064\u002C';
Segments[4][1] = 2;
Segments[4][2] = 0;


var GuessSequence = new Array();

var Answers = new Array();
Answers[0] = new Array(1,2,3,4,5);


function WriteToGuess(Feedback) {
	document.getElementById('GuessDiv').innerHTML = Feedback;

}

function Undo(){
	if (GuessSequence.length < 1){
		return;
	}
	GuessSequence.length = GuessSequence.length - 1;
	BuildCurrGuess();
	BuildExercise();
	DisplayExercise(Exercise);
//Following line modified for 6.0.4.44 -- "remaining words" message removed, no longer needed
	WriteToGuess('<span class="Answer">' + Output + '</span>');
}

function AddSegment(SegNum){

	GuessSequence[GuessSequence.length] = SegNum;
	BuildCurrGuess();
	WriteToGuess('<span class="Answer">' + Output + '</span>');
	BuildExercise();
	DisplayExercise(Exercise);
}

function BuildCurrGuess(){

	var i = 0;
	var j = 0;
	var NewSeg = '';

//first, create arrays of all the segments guessed so far and those not yet used
	GuessSegs = new Array();
	GuessSegs.length = 0;

//set the "used" markers all to 0
	for (i=0; i<Segments.length; i++){
		Segments[i][2] = 0;
	}

	for (i=0; i<GuessSequence.length; i++){
		for (j=0; j<Segments.length; j++){
			if ((Segments[j][1] == GuessSequence[i])&&(Segments[j][2] == 0)){
				GuessSegs[GuessSegs.length] = Segments[j][0];
				Segments[j][2] = 1;
				break;
			}
		}
	}

//Create the list of unused segments
	RemainingList = '';
	for (i=0; i<Segments.length; i++){
		if (Segments[i][2] == 0){
			RemainingList += Segments[i][0] + '&#160; &#160;&#160;';
		}
	}
	
//now concatenate the segments, adding spaces where appropriate;
	Output = CompileString(GuessSequence);
}

function CompileString(InArray){
	var OutString = '';
	var i = 0;
	OutArray = new Array();

	for (i=0; i<InArray.length; i++){
		OutArray[OutArray.length] = FindSegment(InArray[i]);
	}

	if (OutArray.length > 0){
		OutString = OutArray[0];
	}
	else{
		OutString = '';
	}
	var Spacer = '';

	for (i=1; i<OutArray.length; i++){
		Spacer = ' ';
		if ((Openers.indexOf(OutString.charAt(OutString.length-1)) > -1)||(Punctuation.indexOf(OutArray[i].charAt(0)) > -1)){
			Spacer = '';
		}
		OutString = OutString + Spacer + OutArray[i];		
	}

//Capitalize the first letter if necessary
	if (CapitalizeFirst == true){
		i = 0;
		if ((Openers.indexOf(OutString.charAt(i))>-1)||(OutString.charAt(i) == ' ')){
			i++;
		}
		if ((Openers.indexOf(OutString.charAt(i))>-1)||(OutString.charAt(i) == ' ')){
			i++;
		}
		var Temp = OutString.charAt(i);
		Temp = Temp.toUpperCase();
		OutString = OutString.substring(0, i) + Temp + OutString.substring(i+1, OutString.length);
	}
	return OutString;
}
function CheckAnswer(CheckType){

	if (GuessSequence.length < 1){
		if (CheckType == 1){
			ShowMessage(NextCorrect + '<br /><span class="Answer">' + FindSegment(Answers[0][0]) + '</span>');
			Penalties++;
		}
		return;
	}

	var i = 0;
	var j = 0;
	var k = 0;
	var WellDone = '';
	var WhichCorrect = -1;
	var TryAgain = '';
	var LongestCorrectBit = '';
	TempCorrect = new Array();
	LongestCorrect = new Array();
	var TempHint = '';
	var HintToReturn = 1;
	var OtherAnswers = '';
	var AllDone = false;

	for (i=0; i<Answers.length; i++){
		TempCorrect.length = 0;
		for (j=0; j<Answers[i].length; j++){
			if (Answers[i][j] == GuessSequence[j]){
				TempCorrect[j] = GuessSequence[j];
			}
			else{
				TempHint = Answers[i][j];
				break;
			}
		}
		if ((TempCorrect.length == GuessSequence.length)&&(TempCorrect.length == Answers[i].length)){

			WhichCorrect = i;
			break;
		}
		else{
			if (TempCorrect.length > LongestCorrect.length){
				LongestCorrect.length = 0;
				for (k=0; k<TempCorrect.length; k++){
					LongestCorrect[k] = TempCorrect[k];
				}
				HintToReturn = TempHint;
			} 
		}	
	}
	if (WhichCorrect > -1){
		AllDone = true;
		for (i=0; i<Answers.length; i++){
			if (i!=WhichCorrect){
				OtherAnswers += '<br />' + CompileString(Answers[i]);
			}
		}

		WellDone = '<span class="Answer">' + Output + '</span><br /><br />' + CorrectResponse + '<br />';

		if (AnswersTried.length > 0){AnswersTried += ' | ';}
		AnswersTried += Output;
		
//Do score calculation here
		Score = Math.floor(((Segments.length-Penalties) * 100)/Segments.length);


		if (OtherAnswers.length > 0){
			WellDone += TheseAnswersToo + '<span class="Answer">' + OtherAnswers + '</span>';
		}


		WriteToGuess(WellDone);
		ShowMessage(WellDone + '<br />' + YourScoreIs + ' ' + Score + '%.');
	}

	else{
		var WrongGuess = CompileString(GuessSequence);
		if (AnswersTried.length > 0){AnswersTried += ' | ';}
		AnswersTried += WrongGuess;
		TryAgain = '<span class="Answer">' + WrongGuess + '</span><br /><br />';
		if (CheckType == 0){
			TryAgain += IncorrectResponse + '<br />';
		}

		if (LongestCorrect.length > 0){

			LongestCorrectBit = CompileString(LongestCorrect);
			GuessSequence.length = LongestCorrect.length;
			TryAgain += ThisMuchCorrect + '<br /><span class="Answer">' + LongestCorrectBit + '</span><br />';

//These lines added for 6.0.3.44
			WriteToGuess('<span class="Answer">' + LongestCorrectBit + '</span>');
		}
		else{
			GuessSequence.length = 0;
			WriteToGuess('');
		}

		if (CheckType == 1){
			TryAgain += NextCorrect + '<br /><span class="Answer">' + FindSegment(HintToReturn) + '</span>';
		}

		BuildCurrGuess();
		BuildExercise();
		DisplayExercise(Exercise);
		ShowMessage(TryAgain);
		Penalties++; //Penalty for inaccurate check
		


	}
//If the exercise is over, deal with that
	if ((AllDone == true)||(TimeOver == true)){


		TimeOver = true;
		Locked = true;
		Finished = true;
		WriteToInstructions(YourScoreIs + ' ' + Score + '%.'); 
	}

}

function FindSegment(SegID){
	var Seg = '';
	for (var i=0; i<Segments.length; i++){
		if (Segments[i][1] == SegID){
			Seg = Segments[i][0];
			break;
		}
	}
	return Seg;
}

function StartUp(){

//Stash the instructions so they can be redisplayed
	strInstructions = document.getElementById('InstructionsDiv').innerHTML;
	






	Segments = Shuffle(Segments);

//Build and show the exercise
	BuildExercise();
	DisplayExercise(Exercise);	
	

}


function BuildExercise(){
	Exercise = '';

	var SegRow = '';
	var TempRow = '';

	for (var i=0; i<Segments.length; i++){
//if the segment hasn't been used yet
		if (Segments[i][2] == 0){
			TempRow = SegmentTemplate;
			TempRow = TempRow.replace(/\[SegmentNumber\]/g, Segments[i][1]);
			TempRow = TempRow.replace(/\[CurrentSegment\]/g, Segments[i][0]);
			SegRow += TempRow;
		}
	}

//Make it into a table
	Exercise = SegRow;
}

function DisplayExercise(StuffToDisplay){
	document.getElementById('SegmentDiv').innerHTML = StuffToDisplay;
	FocusAButton();

}








//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='index.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='JQuiz.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">Unscramble the Sentence</h2>

	<h3 class="ExerciseSubtitle">Mixed-up sentence exercise</h3>



</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Put the parts in order to form a sentence. When you think your answer is correct, click on "Check" to check your answer. If you get stuck, click on "Hint" to find out the next correct part.</div>
</div>

<div id="ContainerDiv">



<div class="ExerciseContainer">
<div id="GuessDiv">
&#160;
</div>

<div id="MainDiv">

<button id="CheckButton1" class="FuncButton" onclick="CheckAnswer(0)">&#160;Check&#160;</button>


<button class="FuncButton" onclick="Undo()">&#160;Undo&#160;</button>



<button class="FuncButton" onclick="location.reload()">&#160;Restart&#160;</button>



<button class="FuncButton" onclick="CheckAnswer(1)">&#160;Hint&#160;</button>


<div id="SegmentDiv">

</div>

</div>

</div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='index.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='JQuiz.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
