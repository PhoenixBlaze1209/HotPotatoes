<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Aly."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="Aly" />
<meta name="dc:title" content="Basic Needs Crossword" />



<title>
Basic Needs Crossword
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */


/* CSS variables for colours. */
:root {
  --font-family: "Segoe UI", Roboto, Arial, sans-serif;
  --font-size: 16px;
  --color-text: #1a1a1a;
  --color-bg: #f9fafb;
  --color-primary: #2563eb;
  --color-primary-hover: #1d4ed8;
  --color-secondary: #e5e7eb;
  --color-border: #d1d5db;
  --color-success: #16a34a;
  --color-error: #dc2626;
  --radius: 0.75rem;
  --shadow: 0 4px 8px rgba(0,0,0,0.05);
}

/* Alternative color scheme - uncomment to use */
/*
:root {
  --font-family: 'Arial', Helvetica, sans-serif;
  --font-size: 0.9rem;
  --color-text: #333333;
  --color-title: #222222;
  --color-primary: #4f6ef7;
  --color-primary-hover: #3b50b2;
  --color-secondary: #f5f5f5;
  --color-accent: #ff7f50;
  --color-bg: #fefefe;
  --color-exercise-bg: #ffffff;
  --color-border: #cccccc;
  --color-success: #16a34a;
  --color-error: #dc2626;
  --radius: 0.75rem;
  --shadow: 0 4px 8px rgba(0,0,0,0.1);
}
*/

body {
  font-family: var(--font-family);
  font-size: var(--font-size);
  background-color: var(--color-bg);
  color: var(--color-text);
  margin: 0 5%;
  padding-bottom: 1rem;
  line-height: 1.6;
}

p {
  text-align: left;
  margin: 0;
  font-size: 1em;
}

table, div, span, td {
  font-size: 1em;
  color: var(--color-text);
}

div.Titles {
  padding: 0.75rem;
  text-align: center;
  color: var(--color-primary);
  font-weight: bold;
}

button {
  font-family: var(--font-family);
  font-size: 1em;
  cursor: pointer;
  border: none;
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  background-color: var(--color-primary);
  color: #ffffff;
  transition: all 0.2s ease-in-out;
  box-shadow: var(--shadow);
}

button:hover {
  background-color: var(--color-primary-hover);
}

button:active {
  transform: translateY(1px);
  box-shadow: none;
}

.ExerciseTitle {
  font-size: 1.4rem;
  font-weight: bold;
  text-align: center;
  margin: 1rem 0;
  color: var(--color-primary);
}

.ExerciseSubtitle {
  font-size: 1.2rem;
  font-weight: 600;
  text-align: center;
  margin-bottom: 1rem;
  color: var(--color-text);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer {
  background-color: #ffffff;
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  padding: 1rem;
  margin: 0.5rem 0;
  text-align: center;
  font-size: 1em;
  color: var(--color-text);
}

div.ReadingContainer, div.ExerciseContainer {
  flex: 1;
  min-width: 15em;
  margin: 0.5rem;
}

div#ContainerDiv {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin: 0;
  padding: 0;
}

/* RTL Text Support */
.RTLText {
  text-align: right;
  font-size: 150%;
  direction: rtl;
  font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--font-family); 
}

.CentredRTLText {
  text-align: center;
  font-size: 150%;
  direction: rtl;
  font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--font-family); 
}

button p.RTLText {
  text-align: center;
}

.RTLGapBox {
  text-align: right;
  font-size: 150%;
  direction: rtl;
  font-family: "Times New Roman", var(--font-family);
}

.rtl {
  text-align: right;
  font-size: 140%;
}

.Guess {
  color: var(--color-error);
  font-weight: bold;
}

.CorrectAnswer {
  color: var(--color-success);
  font-weight: bold;
}

/* Timer Styles */
div#Timer {
  padding: 0.25em;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  color: var(--color-primary);
}

span#TimerText {
  padding: 0.25em;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  font-weight: bold;
  display: none;
  color: var(--color-primary);
  background-color: #ffffff;
}

/* Feedback Styles */
.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer {
  color: var(--color-text);
}

.LeftItem {
  font-size: 1em;
  color: var(--color-text);
  text-align: left;
}

.RightItem {
  font-weight: bold;
  font-size: 1em;
  color: var(--color-text);
  text-align: left;
}

/* Form Elements */
input, textarea {
  font-family: var(--font-family);
  font-size: 1rem;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.5rem;
  margin: 0.25rem;
  transition: border-color 0.2s ease;
}

input:focus, textarea:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
}

select {
  font-size: 1em;
  font-family: var(--font-family);
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.5rem;
}

/* Feedback Dialog */
div.Feedback {
  background-color: #ffffff;
  left: 33%;
  width: 34%;
  top: 33%;
  z-index: 1000;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 1rem;
  text-align: center;
  color: var(--color-text);
  position: absolute;
  display: none;
  font-size: 1em;
  box-shadow: 0 10px 25px rgba(0,0,0,0.15);
}

div.ExerciseDiv {
  color: var(--color-text);
}

/* JMatch Styles */
table.MatchTable {
  margin: 2em auto; 
  border-width: 0;
}

/* Flashcard Styles */
table.FlashcardTable {
  background-color: transparent;
  color: var(--color-text);
  border-color: var(--color-border);
  margin: 2em auto;
  position: relative;
  text-align: center;
  padding: 0;
}

table.FlashcardTable tr {
  border-style: none;
  margin: 0;
  padding: 0;
  background-color: var(--color-secondary);
}

table.FlashcardTable td.Showing {
  font-size: 140%;
  text-align: center;
  width: 50%;
  display: table-cell;
  padding: 2em;
  margin: 0;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  color: var(--color-text);
  box-shadow: var(--shadow);
  background-color: #ffffff;
}

table.FlashcardTable td.Hidden {
  display: none;
}

/* JMix and JMatch Drag Styles */
div.JMixDrag, div.JMatchDrag {
  padding: 0;
  background-color: #ffffff;
  border-style: none;
}

div#GuessDiv {
  padding: 0.5em;
  margin-bottom: 2em;
}

div#SegmentDiv {
  margin: 2em 0;
  text-align: center;
}

a.ExSegment {
  font-size: 120%;
  font-weight: bold;
  text-decoration: none;
  color: var(--color-text);
  display: inline-block;
  padding: 0.5em;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  margin-bottom: 0.5em;
  background-color: #ffffff;
  transition: all 0.2s ease;
}

a.ExSegment:hover {
  background-color: var(--color-secondary);
  border-color: var(--color-primary);
}

span.RemainingWordList {
  font-style: italic;
}

div.DropLine {
  position: absolute;
  text-align: left;
  border-bottom: 1px solid var(--color-primary);
  width: 80%;
  left: 10%;
}

/* JCloze Styles */
.ClozeWordList {
  text-align: center;
  font-weight: bold;
}

div.ClozeBody {
  text-align: left;
  margin: 2rem 0;
  line-height: 2.0;
  font-size: 1.1rem;
}

span.GapSpan {
  font-weight: bold;
}

span.GapSpan input {
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.25rem 0.5rem;
  font-size: 1rem;
  margin: 0.25rem;
}

/* JCross Styles */
table.CrosswordGrid {
  margin: auto auto 1em auto;
  border-collapse: collapse;
  padding: 0;
  background-color: #000000;
}

table.CrosswordGrid tbody tr td {
  width: 1.5em;
  height: 1.5em;
  text-align: center;
  vertical-align: middle;
  font-size: 140%;
  padding: 1px;
  margin: 0;
  border: 1px solid #000000;
  color: #000000;
}

table.CrosswordGrid span {
  color: #000000;
}

table.CrosswordGrid td.BlankCell {
  background-color: #000000;
  color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell {
  text-align: center;
  vertical-align: middle;
  background-color: #ffffff;
  color: #000000;
  font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell {
  text-align: left;
  vertical-align: top;
  background-color: #ffffff;
  color: #000000;
  padding: 1px;
  font-weight: bold;
}

.NumLetterCellText {
  cursor: pointer;
  color: #000000;
}

.GridNum {
  vertical-align: super;
  font-size: 66%;
  font-weight: bold;
  text-decoration: none;
  color: #000000;
}

.GridNum:hover, .GridNum:visited {
  color: #000000;
}

table#Clues {
  margin: auto;
  vertical-align: top;
}

table#Clues td {
  vertical-align: top;
}

table.ClueList {
  margin: auto;
}

td.ClueNum {
  text-align: right;
  font-weight: bold;
  vertical-align: top;
}

td.Clue {
  text-align: left;
}

div#ClueEntry {
  text-align: left;
  margin-bottom: 1em;
}

/* Keypad Styles */
div.Keypad {
  text-align: center;
  display: none;
  margin-bottom: 0.5em;
}

div.Keypad button {
  font-family: var(--font-family);
  font-size: 120%;
  background-color: #ffffff;
  color: var(--color-text);
  width: 2em;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  box-shadow: var(--shadow);
  cursor: pointer;
  transition: all 0.2s ease;
}

div.Keypad button:hover {
  background-color: var(--color-secondary);
}

/* JQuiz Styles */
div.QuestionNavigation {
  text-align: center;
}

.QNum {
  margin: 0em 1em 0.5em 1em;
  font-weight: bold;
  vertical-align: middle;
}

.QuestionText {
  text-align: left;
  margin: 0;
  font-size: 1em;
}

.Answer {
  font-size: 120%;
}

.PartialAnswer {
  font-size: 120%;
  letter-spacing: 0.1em;
  color: var(--color-primary);
}

.Highlight {
  color: #000000;
  background-color: #ffff00;
  font-weight: bold;
  font-size: 120%;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}

ol.QuizQuestions {
  text-align: left;
  list-style-type: none;
}

li.QuizQuestion {
  padding: 1em;
  border-bottom: 1px solid var(--color-border);
}

ol.MCAnswers {
  text-align: left;
  list-style-type: upper-alpha;
  padding: 1em;
}

ol.MCAnswers li {
  margin-bottom: 1em;
}

ol.MSelAnswers {
  text-align: left;
  list-style-type: lower-alpha;
  padding: 1em;
}

div.ShortAnswer {
  padding: 1em;
}

/* Button Styles */
button, .FuncButton, .NavButton {
  font-family: var(--font-family);
  font-size: 1rem;
  background-color: var(--color-primary);
  color: white;
  border: none;
  border-radius: var(--radius);
  padding: 0.5rem 1rem;
  margin: 0.25rem;
  cursor: pointer;
  transition: background-color 0.2s ease;
  box-shadow: var(--shadow);
}

button:hover, .FuncButton:hover, .NavButton:hover {
  background-color: var(--color-primary-hover);
}

button:active, .FuncButton:active, .NavButton:active {
  box-shadow: none;
  transform: translateY(1px);
}

/* Navigation Bar */
div.NavButtonBar {
  background-color: var(--color-primary);
  padding: 0.5rem;
  text-align: center;
  border-radius: var(--radius);
  margin: 1rem 0;
  box-shadow: var(--shadow);
}

.NavButton {
  background-color: white;
  color: var(--color-primary);
}

.NavButton:hover {
  background-color: var(--color-secondary);
  color: var(--color-primary-hover);
}

/* Links */
a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color 0.2s ease;
}

a:visited {
  color: #7c3aed;
}

a:hover {
  color: var(--color-primary-hover);
  text-decoration: underline;
}

/* Card Styles */
div.CardStyle {
  position: absolute;
  font-family: var(--font-family);
  font-size: 1em;
  border: 1px solid var(--color-border);
  border-radius: var(--radius);
  padding: 0.5em;
  min-width: 2em;
  color: var(--color-text);
  box-shadow: var(--shadow);
  background-color: #ffffff;
  left: -50px;
  top: -50px;
  overflow: visible;
  touch-action: none;
  user-select: none;
  box-sizing: border-box;
}

div.CardStyleCentered {
  text-align: center;
}



</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}






//JCROSS CORE JAVASCRIPT CODE

var InGap = false;
var CurrentBox = null;
var Feedback = '';
var AcrossCaption = '';
var DownCaption = '';
var Correct = 'Correct! Well done.';
var Incorrect = 'Some of your answers are incorrect. Incorrect squares have been blanked out.'; 
var GiveHint = 'A correct letter has been added.';
var YourScoreIs = 'Your score is ';
var BuiltGrid = '';
var BuiltExercise = '';
var Penalties = 0;
var Score = 0;
var InTextBox = false;
var Locked = false;
var TimeOver = false;
var CaseSensitive = false; 

var InputStuff = '<form method="post" action="" onsubmit="return false;"><span class="ClueNum">[strClueNum]: </span>';
InputStuff += '[strClue] <input autocomplete="off" onfocus="CurrentBox=this;InTextBox=true;" onblur="InTextBox=false;" id="[strBoxId]" type="edit" size="[strEditSize]" maxlength="[strMaxLength]"></input>';
InputStuff += '<button class="FuncButton" onclick="EnterGuess([strParams])">Enter</button>';
InputStuff += '<button class="FuncButton" onclick="ShowHint([strParams])">Hint</button>';
InputStuff += '</form>';

var CurrBoxElement = null;
var Finished = false;

function StartUp(){
//Show a keypad if there is one	(added bugfix for 6.0.4.12)
	if (document.getElementById('CharacterKeypad') != null){
		document.getElementById('CharacterKeypad').style.display = 'block';
	}

	
	AcrossCaption = document.getElementById('CluesAcrossLabel').innerHTML;
	DownCaption = document.getElementById('CluesDownLabel').innerHTML;






}

function GetAnswerLength(Across,x,y){
	Result = 0;
	if (Across == false){
		while ((x<L.length)&&(L[x][y].length > 0)){
			Result += L[x][y].length;
			x++;
		} 
		return Result;
	}
	else{
		while ((y<L[x].length)&&(L[x][y].length > 0)){
			Result += L[x][y].length;
			y++;
		} 	
		return Result;
	}
}

function GetEditSize(Across,x,y){
	var Len = GetAnswerLength(Across,x,y);
	if (IsCJK(L[x][y].charCodeAt(0))){
		Len *= 2;
	}
	return Len;
}

function ShowClue(ClueNum,x,y){
	var Result = '';
	var Temp;
	var strParams;
	var Clue = document.getElementById('Clue_A_' + ClueNum);
	if (Clue != null){
		Temp = InputStuff.replace(/\[ClueNum\]/g, ClueNum);
		Temp = Temp.replace(/\[strClueNum\]/g, AcrossCaption + ' ' + ClueNum);
		strParams = 'true,' + ClueNum + ',' + x + ',' + y + ',\'[strBoxId]\'';
		Temp = Temp.replace(/\[strParams\]/g, strParams);
		Temp = Temp.replace(/\[strBoxId\]/g, 'GA_' + ClueNum + '_' + x + '_' + y);
		Temp = Temp.replace(/\[strEditSize\]/g, GetEditSize(true,x,y));
		Temp = Temp.replace(/\[strMaxLength\]/g, GetAnswerLength(true,x,y));
		Temp = Temp.replace(/\[strClue\]/g, Clue.innerHTML, Temp);
		Result += Temp;
	}
	Clue = document.getElementById('Clue_D_' + ClueNum);
	if (Clue != null){
		Temp = InputStuff.replace(/\[ClueNum\]/g, ClueNum);
		Temp = Temp.replace(/\[strClueNum\]/g, DownCaption + ' ' + ClueNum);
		strParams = 'false,' + ClueNum + ',' + x + ',' + y + ',\'[strBoxId]\'';
		Temp = Temp.replace(/\[strParams\]/g, strParams);
		Temp = Temp.replace(/\[strBoxId\]/g, 'GD_' + ClueNum + '_' + x + '_' + y);
		Temp = Temp.replace(/\[strEditSize\]/g, GetAnswerLength(false,x,y));
		Temp = Temp.replace(/\[strClue\]/g, Clue.innerHTML, Temp);
		Result += Temp;
	}
	document.getElementById('ClueEntry').innerHTML = Result;
}

function EnterGuess(Across,ClueNum,x,y,BoxId){
	if (document.getElementById(BoxId) != null){
		var Guess = document.getElementById(BoxId).value;
		var AnsLength = GetAnswerLength(Across,x,y);
		EnterAnswer(Guess,Across,AnsLength,x,y);
	}
}

function SplitStringToPerceivedChars(InString, PC){
	var Temp = InString.charAt(0);
	if (InString.length > 1){
		for (var i=1; i<InString.length; i++){
			if (IsCombiningDiacritic(InString.charCodeAt(i)) == true){
				Temp += InString.charAt(i);
			}
			else{
				PC.push(Temp);
				Temp = InString.charAt(i);
			}
		}
	}
	PC.push(Temp);
}

function EnterAnswer(Guess,Across,AnsLength,x,y){
	var PC = new Array();
	SplitStringToPerceivedChars(Guess, PC);
	
	var i=x;
	var j=y;
	var Letter = 0;
	while (Letter < AnsLength){
		if (Letter < PC.length){
			G[i][j] = PC[Letter];
			if (document.getElementById('L_' + i + '_' + j) != null){
				document.getElementById('L_' + i + '_' + j).innerHTML = PC[Letter];
			}
		}
		if (Across == true){
			j++;
		}
		else{
			i++;
		}
		Letter++;
	}
}

function SetGridSquareValue(x,y,Val){
	var GridId = 'L_' + x + '_' + y;
	if (document.getElementById(GridId) != null){
		document.getElementById(GridId).innerHTML = Val;
	}
}

function ShowHint(Across,ClueNum,x,y,BoxId){
	var i=x;
	var j=y;
	var LetterFromGuess = '';
	var LetterFromKey = '';
	var OutString = '';
	if (Across==true){
		while (j<L[i].length){
			if (L[i][j] != ''){
				OutString += L[i][j];
				if (CaseSensitive == true){
					LetterFromKey = L[i][j];
					LetterFromGuess = G[i][j];
				}
				else {
					LetterFromKey = L[i][j].toUpperCase();
					LetterFromGuess = G[i][j].toUpperCase();
				}
				if (LetterFromGuess != LetterFromKey){
//				if (G[i][j] != L[i][j]){
					G[i][j] = L[i][j];
					Penalties++;
					break;
				}
			}
			else{
				break;
			}
		j++;
		}
	}
	else{
		while (i<L.length){
			if (L[i][j] != ''){
				OutString += L[i][j];
				if (CaseSensitive == true){
					LetterFromKey = L[i][j];
					LetterFromGuess = G[i][j];
				}
				else {
					LetterFromKey = L[i][j].toUpperCase();
					LetterFromGuess = G[i][j].toUpperCase();
				}
				if (LetterFromGuess != LetterFromKey){
//				if (G[i][j] != L[i][j]){
					G[i][j] = L[i][j];
					Penalties++;
					break;
				}
			}
			else{
				break;
			}
		i++;
		}
	}
	if (document.getElementById(BoxId) != null){
		document.getElementById(BoxId).value = OutString;
	}
}

L = new Array();
L[0] = new Array('','','','S','');
L[1] = new Array('','','','H','');
L[2] = new Array('W','A','T','E','R');
L[3] = new Array('','I','','L','');
L[4] = new Array('','R','','T','');
L[5] = new Array('','','','E','');
L[6] = new Array('','','','R','');
L[7] = new Array('','','','','');
L[8] = new Array('F','O','O','D','');


CL = new Array();
CL[0] = new Array(0,0,0,1,0);
CL[1] = new Array(0,0,0,0,0);
CL[2] = new Array(2,3,0,0,0);
CL[3] = new Array(0,0,0,0,0);
CL[4] = new Array(0,0,0,0,0);
CL[5] = new Array(0,0,0,0,0);
CL[6] = new Array(0,0,0,0,0);
CL[7] = new Array(0,0,0,0,0);
CL[8] = new Array(4,0,0,0,0);


G = new Array();
G[0] = new Array('','','','','');
G[1] = new Array('','','','','');
G[2] = new Array('','','','','');
G[3] = new Array('','','','','');
G[4] = new Array('','','','','');
G[5] = new Array('','','','','');
G[6] = new Array('','','','','');
G[7] = new Array('','','','','');
G[8] = new Array('','','','','');


function CheckAnswers(){
	if (Locked == true){return;}

	var AllCorrect = true;
	var TotLetters = 0;
	var CorrectLetters = 0;
	var LetterFromKey = ''; 
	var LetterFromGuess = '';
	
//Check each letter
	for (var i=0; i<L.length; i++){
		for (var j=0; j<L[i].length; j++){
			if (L[i][j] != ''){
				TotLetters++;
				if (CaseSensitive == true) {
					LetterFromKey = L[i][j];
					LetterFromGuess = G[i][j];
				}
				else {
					LetterFromKey = L[i][j].toUpperCase();
					LetterFromGuess = G[i][j].toUpperCase();
				}
				if (LetterFromGuess != LetterFromKey){ 
					G[i][j] = '';
//Blank that square in the grid
					SetGridSquareValue(i,j,'');
					AllCorrect = false;
				}
				else{
					CorrectLetters++;
				}
			}
		}
	}

	Score = Math.floor(((CorrectLetters-Penalties) * 100)/TotLetters);
	if (Score < 0){Score = 0;}

//Compile the output
	var Output = '';

	if (AllCorrect == true){
		Output = Correct + '<br />';
	}

	Output += YourScoreIs + ' ' + Score + '%.<br />';
	if (AllCorrect == false){
		Output += Incorrect;
		Penalties++;
	}

	ShowMessage(Output);
	WriteToInstructions(Output);
	
	if ((AllCorrect == true)||(TimeOver == true)){


		TimeOver = true;
		Locked = true;
		Finished = true;
	}

}

function TypeChars(Chars){
	if (CurrentBox != null){
		CurrentBox.value += Chars;
	}
}








//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" >

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='index.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='JMix.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">Basic Needs Crossword</h2>

	<h3 class="ExerciseSubtitle">Crossword</h3>



</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Complete the crossword, then click on "Check" to check your answer. If you are stuck, you can click on "Hint" to get a free letter. Click on a number in the grid to see the clue or clues for that number.</div>
</div>

<div id="ContainerDiv">



<div class="ExerciseContainer">




<div id="ClueEntry">

</div>

<!-- This top button is hidden; uncomment it to reveal it. -->
<!--
<button id="CheckButton1" class="FuncButton" onclick="CheckAnswers()">&#160;Check&#160;</button>

 -->
 
<table class="CrosswordGrid">
<tbody>

<tr id="Row_0"><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="NumLetterCell"><a href="javascript:void(0);" class="GridNum" onclick="ShowClue(1,0,3)">1</a><span class="NumLetterCellText" id="L_0_3" onclick="ShowClue(1,0,3)">&#160;&#160;&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_1"><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_1_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_2"><td class="NumLetterCell"><a href="javascript:void(0);" class="GridNum" onclick="ShowClue(2,2,0)">2</a><span class="NumLetterCellText" id="L_2_0" onclick="ShowClue(2,2,0)">&#160;&#160;&#160;</span></td><td class="NumLetterCell"><a href="javascript:void(0);" class="GridNum" onclick="ShowClue(3,2,1)">3</a><span class="NumLetterCellText" id="L_2_1" onclick="ShowClue(3,2,1)">&#160;&#160;&#160;</span></td><td class="LetterOnlyCell"><span id="L_2_2">&#160;</span></td><td class="LetterOnlyCell"><span id="L_2_3">&#160;</span></td><td class="LetterOnlyCell"><span id="L_2_4">&#160;</span></td></tr><tr id="Row_3"><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_3_1">&#160;</span></td><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_3_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_4"><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_4_1">&#160;</span></td><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_4_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_5"><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_5_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_6"><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="LetterOnlyCell"><span id="L_6_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr><tr id="Row_7"><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td><td class="BlankCell">&#160;</td></tr><tr id="Row_8"><td class="NumLetterCell"><a href="javascript:void(0);" class="GridNum" onclick="ShowClue(4,8,0)">4</a><span class="NumLetterCellText" id="L_8_0" onclick="ShowClue(4,8,0)">&#160;&#160;&#160;</span></td><td class="LetterOnlyCell"><span id="L_8_1">&#160;</span></td><td class="LetterOnlyCell"><span id="L_8_2">&#160;</span></td><td class="LetterOnlyCell"><span id="L_8_3">&#160;</span></td><td class="BlankCell">&#160;</td></tr>

</tbody>
</table>

<button id="CheckButton2" class="FuncButton" onclick="CheckAnswers()">&#160;Check&#160;</button>

<table id="Clues" style="display: none;">
<tbody>
<tr>
<td>

<table class="ClueList">
<tbody id="CluesAcross">
<tr><td colspan="2"><h3 class="ExerciseSubtitle" id="CluesAcrossLabel">Across:</h3></td></tr>

<tr><td class="ClueNum">2. </td><td id="Clue_A_2" class="Clue">We drink this everyday</td></tr><tr><td class="ClueNum">4. </td><td id="Clue_A_4" class="Clue">We eat this to get energy</td></tr>

</tbody>
</table>

</td>

<td>

<table class="ClueList">
<tbody id="CluesDown">
<tr><td colspan="2"><h3 class="ExerciseSubtitle" id="CluesDownLabel">Down:</h3></td></tr>

<tr><td class="ClueNum">1. </td><td id="Clue_D_1" class="Clue">A place to live</td></tr><tr><td class="ClueNum">3. </td><td id="Clue_D_3" class="Clue">We breathe this</td></tr>

</tbody>
</table>

</td>
</tr>
</tbody>
</table>

</div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&#160;OK&#160;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">


<button class="NavButton" onclick="history.back(); return false;">&lt;=</button>



<button class="NavButton" onclick="location='index.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='JMix.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
